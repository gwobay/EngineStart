SharedPreferences sharedPref = mActivity.getSharedPreferences("memo_last_check_time", Context.MODE_PRIVATE);
	    	long lTime=sharedPref.getLong("memo_last_check_time", 0);
	    	long timeNow=new Date().getTime();
	    	if (lTime ==0 || lTime+8*3600*1000 <  timeNow)
	    	{
	    		DbProcessor dp=new DbProcessor(mActivity, "kp_volunteer_db");
	    		SQLiteDatabase aDb=dp.getDb();
	    		if (aDb != null) {
			    checkForServerData(1, aDb);			   
			    SharedPreferences.Editor writer=sharedPref.edit();



class GetTextDialogFragment extends DialogFragment {
    

// use contructor to set the attrs

	View mViewFromXml;
	
    /* The activity that creates an instance of this dialog fragment must
     * implement this interface in order to receive event callbacks.
     * Each method passes the DialogFragment in case the host needs to query it. */

    public interface GetTextDialogListener {
        public void onDialogPositiveClick(DialogFragment dialog);
        public void onDialogNegativeClick(DialogFragment dialog);
    }
    
    // Use this instance of the interface to deliver action events
    GetTextDialogListener mListener;
    
    // Override the Fragment.onAttach() method to instantiate the GetTextDialogListener
    @Override
    public void onAttach(Activity activity) {
        super.onAttach(activity);
        // Verify that the host activity implements the callback interface
        try {
            // Instantiate the GetTextDialogListener so we can send events to the host
            mListener = (GetTextDialogListener) activity;
        } catch (ClassCastException e) {
            // The activity doesn't implement the interface, throw exception
            throw new ClassCastException(activity.toString()
                    + " must implement GetTextDialogListener");
        }
    }

@Override
    public Dialog onCreateDialog(Bundle savedInstanceState) {
        // Build the dialog and set up the button click handlers

        AlertDialog.Builder builder = new AlertDialog.Builder(getActivity());
	
	//add set view here to 

        builder.setView(mViewFromXml)
		.setMessage(R.string.dialog_confirm)
               .setPositiveButton(R.string.fire, new DialogInterface.OnClickListener() {
                   public void onClick(DialogInterface dialog, int id) {
                       // Send the positive button event back to the host activity
                       mListener.onDialogPositiveClick(GetTextDialogFragment.this);
                   }
               })
               .setNegativeButton(R.string.cancel, new DialogInterface.OnClickListener() {
                   public void onClick(DialogInterface dialog, int id) {
                       // Send the negative button event back to the host activity
                       mListener.onDialogNegativeClick(GetTextDialogFragment.this);
                   }
               });
        return builder.create();
    }
}